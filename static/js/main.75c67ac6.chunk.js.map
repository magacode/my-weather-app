{"version":3,"sources":["components/error-indicator/error-indicator.js","components/error-boundary/error-boundary.js","constants/index.js","utils/axios-settings.js","api/weather-api.js","store/actions/weather.js","components/weather-item/weather-item.js","components/weather-list/weather-list.js","components/weather-table-cell/weather-table-cell.js","utils/date-format.js","components/weather-table/weather-table.js","containers/city-weather/city-weather.js","store/actions/weather-city.js","store/constants/weather-city.js","components/transitions-modal/transitions-modal.js","containers/common-weather/common-weather.js","store/constants/weather.js","app/app.js","store/reducers/common-weather.js","store/reducers/city-weather.js","store/reducers/index.js","store/index.js","root.js","index.js"],"names":["ErrorIndicator","ErrorBoundary","state","isError","this","setState","props","children","Component","APP_ID","axios","create","baseURL","method","WeatherApi","getWeatherData","a","params","id","lang","units","appid","API","get","getWeatherCityData","lat","lon","WeatherItem","weather","onOpen","coord","name","main","handleOpened","useCallback","ListItem","onClick","button","ListItemText","primary","Chip","color","label","Math","round","temp","WeatherList","weatherList","List","component","aria-label","map","key","WeatherTableCell","daily","item","dt","wind_speed","pressure","humidity","TableRow","TableCell","scope","milliseconds","currentDate","Date","date","getDate","month","getMonth","year","getFullYear","createDate","align","day","useStyles","makeStyles","table","minWidth","WeatherTable","weatherCity","classes","TableContainer","Paper","Table","className","TableHead","TableBody","CityWeather","connect","cityWeather","data","isLoading","error","dispatch","handleFetchCityWeather","type","payload","Boolean","openedCity","useEffect","CircularProgress","theme","modal","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","modalInner","width","maxWidth","height","maxHeight","overflow","position","top","left","transform","TransitionsModal","isOpened","onClose","Modal","aria-labelledby","aria-describedby","open","BackdropComponent","Backdrop","BackdropProps","timeout","closeAfterTransition","Fade","in","Button","variant","CommonWeather","commonWeather","handleFetchWeather","useState","setOpenedCity","isOpenedModal","setIsOpenedModal","handleOpenModal","city","handleCloseModal","list","root","flexGrow","App","Container","Grid","container","xs","initialState","combineReducers","action","middlewares","applyMiddleware","thunk","store","createStore","reducers","Root","ReactDOM","render","document","querySelector"],"mappings":"wOAEaA,EAAiB,kBAC1B,6BACI,+HACA,sdCDKC,EAAb,4MACIC,MAAQ,CACJC,SAAS,GAFjB,kEAMQC,KAAKC,SAAS,CAAEF,SAAS,MANjC,+BAUQ,OAAIC,KAAKF,MAAMC,QACJ,kBAAC,EAAD,MAGJC,KAAKE,MAAMC,aAd1B,GAAmCC,a,qECJtBC,EAAS,mC,QCEPC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,0CACTC,OAAQ,QCDCC,EAAb,kCAAaA,EAEFC,e,sBAAiB,4BAAAC,EAAA,4DACR,SACNC,EAAS,CACXC,GAAI,wBACJC,KAAM,KACNC,MAAO,SACPC,MAAOZ,GANS,kBASba,EAAIC,IARC,SAQQ,CAAEN,YATF,2CAFfH,EAcFU,mB,uCAAqB,iCAAAR,EAAA,6DAASS,EAAT,EAASA,IAAKC,EAAd,EAAcA,IAAd,WAElBT,EAAS,CACXQ,MACAC,MACAP,KAAM,KACNC,MAAO,SACPC,MAAOZ,GAPa,kBAUjBa,EAAIC,IAVa,WAUJ,CAAEN,YAVE,2C,sDCTzB,I,oCCLMU,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAC3BC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,KAAMC,EAASJ,EAATI,KAEfC,EAAeC,uBAAY,WAC7BL,EAAO,CAAEC,QAAOC,WACjB,CAACD,EAAOC,EAAMF,IAEjB,OACI,kBAACM,EAAA,EAAD,CAAUC,QAASH,EAAcI,QAAM,GACnC,kBAACC,EAAA,EAAD,CAAcC,QAASR,IACnB,kBAACS,EAAA,EAAD,CAAMC,MAAM,UAAUC,MAAOC,KAAKC,MAAMZ,EAAKa,QAFrD,WCNKC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAalB,EAAhB,EAAgBA,OAAhB,OACvB,kBAACmB,EAAA,EAAD,CAAMC,UAAU,MAAMC,aAAW,gBAAjC,OACKH,QADL,IACKA,OADL,EACKA,EAAaI,KAAI,SAACvB,GAAD,OACd,kBAAC,EAAD,CACIwB,IAAKxB,EAAQV,GACbU,QAASA,EACTC,OAAQA,S,kGCNjB,IAAMwB,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC5B,2CACKA,QADL,IACKA,OADL,EACKA,EAAOH,KAAI,SAACI,GAAU,IACXC,EAA6CD,EAA7CC,GAAIX,EAAyCU,EAAzCV,KAAMY,EAAmCF,EAAnCE,WAAYC,EAAuBH,EAAvBG,SAAUC,EAAaJ,EAAbI,SAExC,OACI,kBAACC,EAAA,EAAD,CAAUR,IAAKI,GACX,kBAACK,EAAA,EAAD,CAAWZ,UAAU,KAAKa,MAAM,OCZrC,SAAoBC,GAC/B,IAAMC,EAAc,IAAIC,KAAoB,IAAfF,GACvBG,EAAOF,EAAYG,UAGnBC,EADS,CAAC,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,sBAC7DJ,EAAYK,YAE3BC,EAAON,EAAYO,cAEzB,MAAM,GAAN,OAAUL,EAAV,YAAkBE,EAAlB,aAA4BE,GDIPE,CAAWhB,IAEhB,kBAACK,EAAA,EAAD,CAAWY,MAAM,SACZ5B,EAAK6B,KAEV,kBAACb,EAAA,EAAD,CAAWY,MAAM,SACZhB,GAEL,kBAACI,EAAA,EAAD,CAAWY,MAAM,SACZf,GAEL,kBAACG,EAAA,EAAD,CAAWY,MAAM,SACZd,SEXnBgB,EAAYC,YAAW,CACzBC,MAAO,CACHC,SAAU,OAILC,EAAe,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrBC,EAAUN,IAEhB,OACI,kBAACO,EAAA,EAAD,CAAgBjC,UAAWkC,KACvB,kBAACC,EAAA,EAAD,CAAOC,UAAWJ,EAAQJ,MAAO3B,aAAW,gBACxC,kBAACoC,EAAA,EAAD,KACA,kBAAC1B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iCAGA,kBAACA,EAAA,EAAD,CAAWY,MAAM,SAAjB,kFAGA,kBAACZ,EAAA,EAAD,CAAWY,MAAM,SAAjB,qGAGA,kBAACZ,EAAA,EAAD,CAAWY,MAAM,SAAjB,wGAGA,kBAACZ,EAAA,EAAD,CAAWY,MAAM,SAAjB,8DAKJ,kBAACc,EAAA,EAAD,KACI,kBAAC,EAAD,CAAkBjC,MAAO0B,EAAY1B,YCG5CkC,EAAcC,aAVH,SAACvF,GAAD,MAAY,CAChCwF,YAAaxF,EAAMwF,YAAYC,KAC/BC,UAAW1F,EAAMwF,YAAYE,UAC7BzF,QAASD,EAAMwF,YAAYG,UAGJ,SAACC,GAAD,MAAe,CACtCC,uBAAwB,SAACJ,GAAD,OAAUG,GCtCHhE,EDsC+B6D,ECtChC,uCAAW,WAAOG,GAAP,iBAAA9E,EAAA,6DAE3C8E,EAAS,CACLE,KCXoC,+BDQG,kBAQhBlF,EAAWU,mBAAmBM,GARd,gBAQ/B6D,EAR+B,EAQ/BA,KAERG,EAAS,CACLE,KClBgC,6BDmBhCC,QAASN,IAZ0B,gDAiBvCG,EAAS,CACLE,KCxBgC,6BDyBhCC,QAASC,QAAQ,EAAD,MAnBmB,yDAAX,4DAACpE,MDyCR2D,EAzCE,SAAC,GAMvB,IALHC,EAKE,EALFA,YACAE,EAIE,EAJFA,UACAzF,EAGE,EAHFA,QACAgG,EAEE,EAFFA,WACAJ,EACE,EADFA,uBAOA,OAJAK,qBAAU,WACNL,EAAuBI,KACxB,CAACA,EAAYJ,IAGZ,oCAEKH,GACG,kBAACS,EAAA,EAAD,MAGHlG,GACG,kBAAC,EAAD,OAGFyF,IAAczF,GACZ,kBAAC,EAAD,CAAc6E,YAAaU,QGrBrCf,EAAYC,aAAW,SAAC0B,GAAD,MAAY,CACrCC,MAAO,GACPC,MAAO,CACHC,gBAAiBH,EAAMI,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWP,EAAMQ,QAAQ,GACzBC,QAAST,EAAMU,QAAQ,EAAG,EAAG,IAEjCC,WAAY,CACRC,MAAO,QACPC,SAAU,QACVC,OAAQ,QACRC,UAAW,QACXC,SAAU,OACVC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,6BAINC,EAAmB,SAAC,GAI1B,IAHHxB,EAGE,EAHFA,WACAyB,EAEE,EAFFA,SACAC,EACE,EADFA,QAGM5C,EAAUN,IAEhB,OAAIwB,EAKA,6BACI,kBAAC2B,EAAA,EAAD,CACIC,kBAAgB,yBAChBC,mBAAiB,+BACjB3C,UAAWJ,EAAQsB,MACnB0B,KAAML,EACNC,QAASA,EACTK,kBAAmBC,IACnBC,cAAe,CACXC,QAAS,KAEbC,sBAAoB,GAEpB,yBAAKjD,UAAWJ,EAAQgC,YACpB,kBAACsB,EAAA,EAAD,CAAMC,GAAIZ,GACN,yBAAKvC,UAAWJ,EAAQuB,OACpB,wBAAItF,GAAG,0BAAP,kGACyBiF,EAAWpE,MAEpC,0BAAMb,GAAG,gCAAT,gGAGA,kBAACsE,EAAD,CAAaW,WAAYA,EAAWrE,QACpC,kBAAC2G,EAAA,EAAD,CAAQC,QAAQ,YAAYjG,MAAM,YAAYL,QAASyF,GAAvD,mDA3Bb,MC+BFc,EAAgBlD,aAVL,SAACvF,GAAD,MAAY,CAChC0I,cAAe1I,EAAM0I,cAAcjD,KACnCC,UAAW1F,EAAM0I,cAAchD,UAC/BzF,QAASD,EAAM0I,cAAczI,YAGN,SAAC2F,GAAD,MAAe,CACtC+C,mBAAoB,kBAAM/C,EV7DA,uCAAM,WAAMA,GAAN,iBAAA9E,EAAA,6DAElC8E,EAAS,CACLE,KWX+B,0BXQD,kBAQPlF,EAAWC,iBARJ,gBAQtB4E,EARsB,EAQtBA,KAERG,EAAS,CACLE,KWlB2B,wBXmB3BC,QAASN,IAZiB,gDAiB9BG,EAAS,CACLE,KWxB2B,wBXyB3BC,QAASC,QAAQ,EAAD,MAnBU,yDAAN,2DUgEDT,EA/DE,SAAC,GAKzB,IAJHmD,EAIE,EAJFA,cACAhD,EAGE,EAHFA,UACAzF,EAEE,EAFFA,QACA0I,EACE,EADFA,mBACE,EAEkCC,mBAAS,MAF3C,mBAEK3C,EAFL,KAEiB4C,EAFjB,OAGwCD,oBAAS,GAHjD,mBAGKE,EAHL,KAGoBC,EAHpB,KAKIC,EAAkBhH,uBAAY,SAACiH,GACjCJ,EAAcI,GACdF,GAAiB,KAClB,IAEGG,EAAmBlH,uBAAY,WACjC6G,EAAc,MACdE,GAAiB,KAClB,IAMH,OAJA7C,qBAAU,WACNyC,MACD,CAACA,IAGA,oCAEKjD,GACG,kBAACS,EAAA,EAAD,MAGHlG,GACG,kBAAC,EAAD,OAGFyF,IAAczF,GACZ,kBAAC,EAAD,CACI4C,YAAa6F,EAAcS,KAC3BxH,OAAQqH,IAIhB,kBAAC,EAAD,CACItB,SAAUoB,EACVnB,QAASuB,EACTjD,WAAYA,QEhDtBxB,EAAYC,aAAW,iBAAO,CAChC0E,KAAM,CACFC,SAAU,OAILC,EAAM,WACf,IAAMvE,EAAUN,IAEhB,OACI,yBAAKU,UAAWJ,EAAQqE,MACpB,kBAACG,EAAA,EAAD,CAAWtC,SAAS,MAChB,kBAACuC,EAAA,EAAD,CAAMC,WAAS,EAAC3C,QAAS,GACrB,kBAAC0C,EAAA,EAAD,CAAMnG,MAAI,EAACqG,GAAI,IACX,kBAACjB,EAAD,W,yBCdlBkB,GAAe,CACjBlE,KAAM,GACNC,WAAW,EACXzF,SAAS,GCHP0J,GAAe,CACjBlE,KAAM,GACNC,WAAW,EACXzF,SAAS,GCJE2J,eAAgB,CAC3BlB,cFMyB,WAAmC,IAAlC1I,EAAiC,uDAAzB2J,GAAcE,EAAW,uCAE3D,OAAOA,EAAO/D,MAEV,IFhB6B,wBEiBzB,OAAO,6BACA9F,GADP,IAEI0F,WAAW,EACXzF,SAAS,IAGjB,IFtB6B,wBEuBzB,OAAO,6BACAD,GADP,IAEIyF,KAAMoE,EAAO9D,QACbL,WAAW,IAGnB,IF5B6B,wBE6BzB,MAAO,CACHA,WAAW,EACXzF,QAAS4J,EAAO9D,SAGxB,QACI,OAAO/F,IE9BfwF,YDKuB,WAAmC,IAAlCxF,EAAiC,uDAAzB2J,GAAcE,EAAW,uCAEzD,OAAOA,EAAO/D,MAEV,INhBkC,6BMiB9B,OAAO,6BACA9F,GADP,IAEI0F,WAAW,EACXzF,SAAS,IAGjB,INtBkC,6BMuB9B,OAAO,6BACAD,GADP,IAEIyF,KAAMoE,EAAO9D,QACbL,WAAW,IAGnB,IN5BkC,6BM6B9B,OAAO,6BACA1F,GADP,IAEI0F,WAAW,EACXzF,QAAS4J,EAAO9D,UAGxB,QACI,OAAO/F,MEjCb8J,GAAcC,YAAgBC,KAEvBC,GAAQC,YACjBC,GACAL,ICFSM,GAAO,kBAChB,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAUH,MAAOA,IACb,kBAAC,EAAD,SCLZI,IAASC,OAAO,kBAAC,GAAD,MAAUC,SAASC,cAAc,Y","file":"static/js/main.75c67ac6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ErrorIndicator = () => (\r\n    <div>\r\n        <div>Что-то пошло не так</div>\r\n        <div>\r\n            Попробуйте обновить вкладку браузера или повторите попытку через\r\n            несколько минут\r\n        </div>\r\n    </div>\r\n)\r\n","import React, { Component } from \"react\";\r\n\r\nimport { ErrorIndicator } from \"../error-indicator\";\r\n\r\nexport class ErrorBoundary extends Component {\r\n    state = {\r\n        isError: false,\r\n    };\r\n\r\n    componentDidCatch() {\r\n        this.setState({ isError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isError) {\r\n            return <ErrorIndicator />;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n","export const APP_ID = 'b8dd12b10a5e9b631f1d9b511e5e36b3'","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://api.openweathermap.org/data/2.5\",\r\n    method: 'get',\r\n});","import { APP_ID } from '../constants';\r\nimport API from '../utils/axios-settings';\r\n\r\nexport class WeatherApi {\r\n\r\n    static getWeatherData = async () => { \r\n        const url = '/group'\r\n        const params = {\r\n            id: '524901,703448,2643743',\r\n            lang: 'ru',\r\n            units: 'metric',\r\n            appid: APP_ID,\r\n        }\r\n\r\n        return API.get(url, { params });\r\n    };\r\n\r\n    static getWeatherCityData = async ({ lat, lon }) => { \r\n        const url = `/onecall`;\r\n        const params = {\r\n            lat,\r\n            lon,\r\n            lang: 'ru',\r\n            units: 'metric',\r\n            appid: APP_ID,\r\n        }\r\n\r\n        return API.get(url, { params });\r\n    };\r\n\r\n}\r\n","import { \r\n  FETCH_WEATHER_REQUEST, \r\n  FETCH_WEATHER_SUCCESS, \r\n  FETCH_WEATHER_FAILURE \r\n} from '../constants';\r\n\r\nimport { WeatherApi } from '../../api/weather-api';\r\n\r\nexport const getWeatherData = () => async dispatch =>{\r\n\r\n  dispatch({\r\n      type: FETCH_WEATHER_REQUEST,\r\n  });\r\n\r\n  try {\r\n\r\n      const { data } = await WeatherApi.getWeatherData();\r\n\r\n      dispatch({\r\n          type: FETCH_WEATHER_SUCCESS,\r\n          payload: data,\r\n      });\r\n\r\n  } catch(error) {\r\n\r\n      dispatch({\r\n          type: FETCH_WEATHER_FAILURE,\r\n          payload: Boolean(error),\r\n      })\r\n\r\n  } \r\n\r\n}","import React, { useCallback } from 'react';\r\nimport { ListItem, ListItemText, Chip } from '@material-ui/core';\r\n\r\nexport const WeatherItem = ({ weather, onOpen }) => {\r\n    const { coord, name, main } = weather\r\n\r\n    const handleOpened = useCallback(() => {\r\n        onOpen({ coord, name })\r\n    }, [coord, name, onOpen])\r\n\r\n    return (\r\n        <ListItem onClick={handleOpened} button>\r\n            <ListItemText primary={name} />\r\n                <Chip color=\"primary\" label={Math.round(main.temp)} />\r\n                &#8451;\r\n        </ListItem>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport { WeatherItem } from '../weather-item';\r\n\r\nexport const WeatherList = ({ weatherList, onOpen }) => (\r\n    <List component=\"nav\" aria-label=\"city weather\">\r\n        {weatherList?.map((weather) => (\r\n            <WeatherItem \r\n                key={weather.id} \r\n                weather={weather} \r\n                onOpen={onOpen} \r\n            />\r\n        ))}\r\n    </List>\r\n)\r\n","import React from 'react';\r\nimport { TableCell, TableRow } from '@material-ui/core';\r\n\r\nimport createDate from '../../utils/date-format';\r\n\r\nexport const WeatherTableCell = ({ daily }) => (\r\n    <>\r\n        {daily?.map((item) => {\r\n            const { dt, temp, wind_speed, pressure, humidity } = item;\r\n\r\n            return (\r\n                <TableRow key={dt}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                        {createDate(dt)}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {temp.day}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {wind_speed}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {pressure}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {humidity}\r\n                    </TableCell>               \r\n                </TableRow>\r\n                )\r\n            })\r\n        }\r\n    </>\r\n)","export default function createDate(milliseconds) {\r\n    const currentDate = new Date(milliseconds * 1000);\r\n    const date = currentDate.getDate();\r\n\r\n    const months = ['янв','фев','мар','апр','май','июн','июл','авг','сен','окт','ноя','дек'];\r\n    const month = months[currentDate.getMonth()];\r\n\r\n    const year = currentDate.getFullYear();\r\n\r\n    return `${date} ${month}. ${year}`;\r\n}","import React from 'react';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport { WeatherTableCell } from '../weather-table-cell';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nexport const WeatherTable = ({ weatherCity }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                <TableRow>\r\n                    <TableCell>\r\n                        Дата\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Температура&nbsp;(ц)\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Скорость ветра&nbsp;(мс)\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Атм. давление&nbsp;(мм рт.)\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        Влажноть &nbsp;(%)\r\n                    </TableCell>\r\n                </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <WeatherTableCell daily={weatherCity.daily} />\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport { ErrorIndicator } from '../../components/error-indicator';\r\nimport { WeatherTable } from '../../components/weather-table';\r\nimport { getWeatherCityData } from '../../store/actions';\r\n\r\nconst CityWeatherComponent = ({ \r\n    cityWeather, \r\n    isLoading, \r\n    isError, \r\n    openedCity,\r\n    handleFetchCityWeather, \r\n}) => {\r\n\r\n    useEffect(() => { \r\n        handleFetchCityWeather(openedCity);\r\n    }, [openedCity, handleFetchCityWeather]);\r\n\r\n    return (\r\n        <>\r\n\r\n            {isLoading && (\r\n                <CircularProgress />\r\n            )}\r\n\r\n            {isError && (\r\n                <ErrorIndicator />\r\n            )}\r\n\r\n            {!isLoading && !isError && (\r\n                <WeatherTable weatherCity={cityWeather} />\r\n            )} \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cityWeather: state.cityWeather.data,\r\n    isLoading: state.cityWeather.isLoading,\r\n    isError: state.cityWeather.error,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    handleFetchCityWeather: (data) => dispatch(getWeatherCityData(data)), \r\n})\r\n\r\nexport const CityWeather = connect(mapStateToProps, mapDispatchToProps)(CityWeatherComponent)\r\n","import { \r\n  FETCH_WEATHER_CITY_REQUEST, \r\n  FETCH_WEATHER_CITY_SUCCESS, \r\n  FETCH_WEATHER_CITY_FAILURE \r\n} from '../constants';\r\n\r\nimport { WeatherApi } from '../../api/weather-api';\r\n\r\nexport const getWeatherCityData = (coord) => async (dispatch) =>{\r\n\r\n  dispatch({\r\n      type: FETCH_WEATHER_CITY_REQUEST,\r\n  });\r\n\r\n  try {\r\n\r\n      const { data } = await WeatherApi.getWeatherCityData(coord);\r\n\r\n      dispatch({\r\n          type: FETCH_WEATHER_CITY_SUCCESS,\r\n          payload: data,   \r\n      });\r\n\r\n  } catch(error) {\r\n\r\n      dispatch({\r\n          type: FETCH_WEATHER_CITY_FAILURE,\r\n          payload: Boolean(error),\r\n      })\r\n\r\n  } \r\n\r\n}","export const FETCH_WEATHER_CITY_REQUEST = 'FETCH_WEATHER_CITY_REQUEST';\nexport const FETCH_WEATHER_CITY_SUCCESS = 'FETCH_WEATHER_CITY_SUCCESS';\nexport const FETCH_WEATHER_CITY_FAILURE = 'FETCH_WEATHER_CITY_FAILURE';","import React from 'react';\r\nimport { \r\n    Modal, \r\n    Backdrop, \r\n    Fade, \r\n    Button, \r\n    makeStyles,\r\n} from '@material-ui/core'\r\n\r\nimport { CityWeather } from '../../containers/city-weather';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {},\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    modalInner: {\r\n        width: '100vw',\r\n        maxWidth: '750px',\r\n        height: '500px',\r\n        maxHeight: '100vh',\r\n        overflow: 'auto',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n}));\r\n\r\nexport const TransitionsModal = ({ \r\n    openedCity, \r\n    isOpened,\r\n    onClose, \r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    if(!openedCity) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={isOpened}\r\n                onClose={onClose}\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n                closeAfterTransition\r\n            >\r\n                <div className={classes.modalInner}>\r\n                    <Fade in={isOpened}>\r\n                        <div className={classes.paper}>\r\n                            <h2 id=\"transition-modal-title\">\r\n                                Прогноз погоды в г. {openedCity.name}\r\n                            </h2>\r\n                            <span id=\"transition-modal-description\">\r\n                                прогноз на неделю\r\n                            </span>\r\n                            <CityWeather openedCity={openedCity.coord} />\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={onClose}>\r\n                                Закрыть\r\n                            </Button>\r\n                        </div>\r\n                    </Fade>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport { ErrorIndicator } from '../../components/error-indicator';\r\nimport { getWeatherData } from '../../store/actions';\r\nimport { WeatherList } from '../../components/weather-list';\r\nimport { TransitionsModal } from '../../components/transitions-modal';\r\n\r\nconst CommonWeatherComponent = ({ \r\n    commonWeather,  \r\n    isLoading, \r\n    isError, \r\n    handleFetchWeather, \r\n}) => {\r\n\r\n    const [openedCity, setOpenedCity] = useState(null);\r\n    const [isOpenedModal, setIsOpenedModal] = useState(false);\r\n\r\n    const handleOpenModal = useCallback((city) => {\r\n        setOpenedCity(city);\r\n        setIsOpenedModal(true);\r\n    }, []);    \r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setOpenedCity(null);\r\n        setIsOpenedModal(false);\r\n    }, []);\r\n\r\n    useEffect(() => { \r\n        handleFetchWeather();\r\n    }, [handleFetchWeather])\r\n\r\n    return (        \r\n        <>\r\n\r\n            {isLoading && (\r\n                <CircularProgress />\r\n            )}\r\n\r\n            {isError && (\r\n                <ErrorIndicator />\r\n            )}\r\n\r\n            {!isLoading && !isError && (\r\n                <WeatherList \r\n                    weatherList={commonWeather.list} \r\n                    onOpen={handleOpenModal}\r\n                />\r\n            )}  \r\n\r\n            <TransitionsModal \r\n                isOpened={isOpenedModal} \r\n                onClose={handleCloseModal} \r\n                openedCity={openedCity} \r\n            />\r\n\r\n        </>        \r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    commonWeather: state.commonWeather.data,\r\n    isLoading: state.commonWeather.isLoading,\r\n    isError: state.commonWeather.isError,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    handleFetchWeather: () => dispatch(getWeatherData()), \r\n})\r\n\r\nexport const CommonWeather = connect(mapStateToProps, mapDispatchToProps)(CommonWeatherComponent)\r\n","export const FETCH_WEATHER_REQUEST = 'FETCH_WEATHER_REQUEST';\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\nexport const FETCH_WEATHER_FAILURE = 'FETCH_WEATHER_FAILURE';","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Container } from '@material-ui/core';\r\n\r\nimport { CommonWeather } from '../containers/common-weather/common-weather';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport const App = () => {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <Container maxWidth=\"sm\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>            \r\n                        <CommonWeather /> \r\n                    </Grid>      \r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import { \r\n    FETCH_WEATHER_REQUEST, \r\n    FETCH_WEATHER_SUCCESS, \r\n    FETCH_WEATHER_FAILURE \r\n} from '../constants';\r\n\r\nconst initialState = {\r\n    data: [],\r\n    isLoading: false,\r\n    isError: false,\r\n};\r\n\r\nexport const commonWeather = (state = initialState, action) => {\r\n\r\n    switch(action.type) {        \r\n\r\n        case FETCH_WEATHER_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isError: false,\r\n            };\r\n\r\n        case FETCH_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: action.payload,    \r\n                isLoading: false,\r\n            };\r\n\r\n        case FETCH_WEATHER_FAILURE:\r\n            return {\r\n                isLoading: false,\r\n                isError: action.payload,\r\n            };\r\n\r\n        default: \r\n            return state;\r\n\r\n    }\r\n\r\n}\r\n","import { \r\n    FETCH_WEATHER_CITY_REQUEST, \r\n    FETCH_WEATHER_CITY_SUCCESS, \r\n    FETCH_WEATHER_CITY_FAILURE \r\n} from '../constants';\r\n\r\nconst initialState = {\r\n    data: [],\r\n    isLoading: false,\r\n    isError: false,\r\n};\r\n\r\nexport const cityWeather = (state = initialState, action) => {\r\n\r\n    switch(action.type) {        \r\n    \r\n        case FETCH_WEATHER_CITY_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isError: false,\r\n            };\r\n\r\n        case FETCH_WEATHER_CITY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: action.payload,\r\n                isLoading: false,\r\n            };\r\n\r\n        case FETCH_WEATHER_CITY_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: action.payload,\r\n            };\r\n\r\n        default: \r\n            return state;\r\n\r\n    }\r\n\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { commonWeather } from './common-weather';\r\nimport { cityWeather } from './city-weather';\r\n\r\nexport default combineReducers({\r\n    commonWeather,\r\n    cityWeather,\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from './reducers';\r\n\r\nconst middlewares = applyMiddleware(thunk)\r\n\r\nexport const store = createStore(\r\n    reducers, \r\n    middlewares,\r\n);\r\n","import React from 'react';\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { ErrorBoundary } from './components/error-boundary';\r\nimport { App } from './app';\r\nimport { store } from './store';\r\n\r\nexport const Root = () => (\r\n    <ErrorBoundary>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>        \r\n    </ErrorBoundary> \r\n)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Root } from './root';\r\n\r\nReactDOM.render(<Root />, document.querySelector(\"#root\"));"],"sourceRoot":""}